package _88_VIP6.打家劫舍;

/*
你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，
影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。

 

示例 1：

输入：[1,2,3,1]
输出：4
解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
     偷窃到的最高金额 = 1 + 3 = 4 。
示例 2：

输入：[2,7,9,3,1]
输出：12
解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
     偷窃到的最高金额 = 2 + 9 + 1 = 12 。
 

提示：

0 <= nums.length <= 100
0 <= nums[i] <= 400

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/house-robber
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
// _198_打家劫舍  动态规划
public class _198_HouseRobber {

    /*
        针对每一个房屋，有2种选择： 偷、不偷
        0 1 2 3 4 5
     */
//    public int rob(int[] nums) {
//
//        return 0 ;
//    }

    //  退出条件
    //  从最后一个开始偷，直接选择最后一个，没有别的选择了。 只能选择5 [ 退出条件 ]
    //  如果从倒数第二个开始偷，即从 4 5 两个值中开始偷。只有两个选择：要么选择偷4，要么选择偷5；那么选择两个之中最金额

    // 偷 begin 这一家 ，不偷begin这一家
    // 选择偷begin的最大金额。一旦从begin开始偷，那么begin + 1 就不能偷了，接下来从begin + 2开始偷
    // 如果选择不偷begin这一家，那么直接从begin + 1 这一家开始偷





    /////////////////// 如果是倒着偷 /////////////////////
    // rob(nums,5) -> rob(nums,4) rob(nums,3)  // 会走这两个选择
    // rob(nums,4) -> rob(nums,3) rob(nums,2)



//    非递归
    // 缓存       从后往前偷
//    arr[3] 是从第3号房子开始往前偷出来的最大金额
//    arr[i] 是从第i号房子开始往前偷出来的最大金额



    // dp 解法
    // array[3]是从第3号房子开始往前偷出来的最大金额
    // array[i]是从第i号房子开始往前偷出来的最大金额
    public int rob(int[] nums){
        if(nums==null || nums.length==0)
            return 0;
        if(nums.length==1)
            return nums[0];

        int [] dp=new int[nums.length];
        dp[0]=nums[0];
        dp[1]=Math.max(nums[0],nums[1]);
        for (int i = 2; i < dp.length; i++) {
            dp[i]=Math.max(nums[i] + dp[i-2],dp[i-1]);
        }
        return dp[dp.length-1];
    }
}
